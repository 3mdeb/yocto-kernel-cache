From 5d59d7575bd858ad43480545d998945a5988f18c Mon Sep 17 00:00:00 2001
From: Kevin Hao <kexin.hao@windriver.com>
Date: Tue, 20 Sep 2016 19:54:40 +0800
Subject: [PATCH 1/5] fs: yaffs2: kill PAGE_CACHE_* and page_cache_{get,
 release} macros

As what we have done in commit 09cbfeaf1a5a ("mm, fs: get rid of
PAGE_CACHE_* and page_cache_{get,release} macros").

Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
Signed-off-by: Bruce Ashfield <bruce.ashfield@windriver.com>
---
 fs/yaffs2/yaffs_vfs.c | 38 +++++++++++++++++++-------------------
 1 file changed, 19 insertions(+), 19 deletions(-)

diff --git a/fs/yaffs2/yaffs_vfs.c b/fs/yaffs2/yaffs_vfs.c
index 1494c8f33d20..9aa007d9ded6 100644
--- a/fs/yaffs2/yaffs_vfs.c
+++ b/fs/yaffs2/yaffs_vfs.c
@@ -266,13 +266,13 @@ static int yaffs_readpage_nolock(struct file *f, struct page *pg)
 	struct yaffs_obj *obj;
 	unsigned char *pg_buf;
 	int ret;
-	loff_t pos = ((loff_t) pg->index) << PAGE_CACHE_SHIFT;
+	loff_t pos = ((loff_t) pg->index) << PAGE_SHIFT;
 	struct yaffs_dev *dev;
 
 	yaffs_trace(YAFFS_TRACE_OS,
 		"yaffs_readpage_nolock at %lld, size %08x",
 		(long long)pos,
-		(unsigned)PAGE_CACHE_SIZE);
+		(unsigned)PAGE_SIZE);
 
 	obj = yaffs_dentry_to_obj(f->f_path.dentry);
 
@@ -290,7 +290,7 @@ static int yaffs_readpage_nolock(struct file *f, struct page *pg)
 
 	yaffs_gross_lock(dev);
 
-	ret = yaffs_file_rd(obj, pg_buf, pos, PAGE_CACHE_SIZE);
+	ret = yaffs_file_rd(obj, pg_buf, pos, PAGE_SIZE);
 
 	yaffs_gross_unlock(dev);
 
@@ -400,22 +400,22 @@ static int yaffs_writepage(struct page *page)
 		BUG();
 	i_size = i_size_read(inode);
 
-	end_index = i_size >> PAGE_CACHE_SHIFT;
+	end_index = i_size >> PAGE_SHIFT;
 
 	if (page->index < end_index)
-		n_bytes = PAGE_CACHE_SIZE;
+		n_bytes = PAGE_SIZE;
 	else {
-		n_bytes = i_size & (PAGE_CACHE_SIZE - 1);
+		n_bytes = i_size & (PAGE_SIZE - 1);
 
 		if (page->index > end_index || !n_bytes) {
 			yaffs_trace(YAFFS_TRACE_OS,
 				"yaffs_writepage at %lld, inode size = %lld!!",
-				((loff_t)page->index) << PAGE_CACHE_SHIFT,
+				((loff_t)page->index) << PAGE_SHIFT,
 				inode->i_size);
 			yaffs_trace(YAFFS_TRACE_OS,
 				"                -> don't care!!");
 
-			zero_user_segment(page, 0, PAGE_CACHE_SIZE);
+			zero_user_segment(page, 0, PAGE_SIZE);
 			set_page_writeback(page);
 			unlock_page(page);
 			end_page_writeback(page);
@@ -423,8 +423,8 @@ static int yaffs_writepage(struct page *page)
 		}
 	}
 
-	if (n_bytes != PAGE_CACHE_SIZE)
-		zero_user_segment(page, n_bytes, PAGE_CACHE_SIZE);
+	if (n_bytes != PAGE_SIZE)
+		zero_user_segment(page, n_bytes, PAGE_SIZE);
 
 	get_page(page);
 
@@ -436,13 +436,13 @@ static int yaffs_writepage(struct page *page)
 
 	yaffs_trace(YAFFS_TRACE_OS,
 		"yaffs_writepage at %lld, size %08x",
-		((loff_t)page->index) << PAGE_CACHE_SHIFT, n_bytes);
+		((loff_t)page->index) << PAGE_SHIFT, n_bytes);
 	yaffs_trace(YAFFS_TRACE_OS,
 		"writepag0: obj = %lld, ino = %lld",
 		obj->variant.file_variant.file_size, inode->i_size);
 
 	n_written = yaffs_wr_file(obj, buffer,
-				  ((loff_t)page->index) << PAGE_CACHE_SHIFT, n_bytes, 0);
+				  ((loff_t)page->index) << PAGE_SHIFT, n_bytes, 0);
 
 	yaffs_set_super_dirty(dev);
 
@@ -505,7 +505,7 @@ static int yaffs_write_begin(struct file *filp, struct address_space *mapping,
 			     struct page **pagep, void **fsdata)
 {
 	struct page *pg = NULL;
-	pgoff_t index = pos >> PAGE_CACHE_SHIFT;
+	pgoff_t index = pos >> PAGE_SHIFT;
 
 	int ret = 0;
 	int space_held = 0;
@@ -554,7 +554,7 @@ out:
 		yaffs_release_space(filp);
 	if (pg) {
 		unlock_page(pg);
-		page_cache_release(pg);
+		put_page(pg);
 	}
 	return ret;
 }
@@ -638,7 +638,7 @@ static int yaffs_write_end(struct file *filp, struct address_space *mapping,
 {
 	int ret = 0;
 	void *addr, *kva;
-	uint32_t offset_into_page = pos & (PAGE_CACHE_SIZE - 1);
+	uint32_t offset_into_page = pos & (PAGE_SIZE - 1);
 
 	kva = kmap(pg);
 	addr = kva + offset_into_page;
@@ -660,7 +660,7 @@ static int yaffs_write_end(struct file *filp, struct address_space *mapping,
 
 	yaffs_release_space(filp);
 	unlock_page(pg);
-	page_cache_release(pg);
+	put_page(pg);
 	return ret;
 }
 #else
@@ -670,7 +670,7 @@ static int yaffs_commit_write(struct file *f, struct page *pg, unsigned offset,
 {
 	void *addr, *kva;
 
-	loff_t pos = (((loff_t) pg->index) << PAGE_CACHE_SHIFT) + offset;
+	loff_t pos = (((loff_t) pg->index) << PAGE_SHIFT) + offset;
 	int n_bytes = to - offset;
 	int n_written;
 
@@ -2836,8 +2836,8 @@ static struct super_block *yaffs_internal_read_super(int yaffs_version,
 		return NULL;
 	}
 
-	sb->s_blocksize = PAGE_CACHE_SIZE;
-	sb->s_blocksize_bits = PAGE_CACHE_SHIFT;
+	sb->s_blocksize = PAGE_SIZE;
+	sb->s_blocksize_bits = PAGE_SHIFT;
 
 	yaffs_trace(YAFFS_TRACE_OS,
 		"yaffs_read_super: Using yaffs%d", yaffs_version);
-- 
2.5.0

